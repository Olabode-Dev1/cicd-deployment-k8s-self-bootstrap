pipeline {
  agent {
    docker {
      // Select a Docker image to run the below build, test on- Agent or VM
      image 'maven:3.8.6-eclipse-temurin-17'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
    }
  }
  stages {
    stage('Checkout') {
      steps {
        sh 'echo passed'
        //git branch: 'main', url: 'https://github.com/pdonthala/Jenkins.git'
      }
    }
    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        // build the project and create a JAR file
        sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
      }
    }
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://52.160.39.149:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'Sonar', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "pxdonthala/jenkins:${BUILD_NUMBER}"
        // DOCKERFILE_LOCATION = "java-maven-sonar-argocd-helm-k8s/spring-boot-app/Dockerfile". Place you DockerFile here
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
            sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
            def dockerImage = docker.image("${DOCKER_IMAGE}")
            docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                dockerImage.push()
            }
        }
      }
    }
    stage('Update Deployment File') {
        environment {
            GIT_REPO_NAME = "Jenkins"
            GIT_USER_NAME = "pdonthala"
        }
        steps {
            withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                sh '''
                    git config user.email "puja@gmail.com"
                    git config user.name "Puja"
                    BUILD_NUMBER=${BUILD_NUMBER}
                    sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                    git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                    git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                    git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                '''
            }
        }
    }
  }
}
/////////////////////////////////////////////////
pipeline {
    agent {
        docker { 
            image 'maven:3.8.6-eclipse-temurin-17' 
        }
    }
    environment {
        DOCKER_IMAGE = 'your-dockerhub-username/spring-petclinic:latest'
        DOCKER_CREDENTIALS = 'dockerhub-credentials-id' // Replace with your Jenkins credential ID
        SONAR_TOKEN = 'your-sonarcloud-token'          // Replace with your SonarCloud token
    }
    stages {
        stage('Checkout') {
            steps {
                // Checkout the source code from the repository
                checkout scm
            }
        }
        stage('Build & Test') {
            steps {
                // Build and test the application
                sh 'mvn clean package'
            }
        }
        stage('Static Code Analysis') {
            steps {
                // Perform static code analysis using SonarCloud
                sh '''
                mvn sonar:sonar \
                    -Dsonar.projectKey=spring-petclinic \
                    -Dsonar.organization=your-sonarcloud-organization \
                    -Dsonar.host.url=https://sonarcloud.io \
                    -Dsonar.login=$SONAR_TOKEN
                '''
            }
        }
        stage('Build Docker Image') {
            steps {
                // Build the Docker image
                sh "docker build -t $DOCKER_IMAGE ."
            }
        }
        stage('Push Docker Image') {
            steps {
                // Log in to Docker Hub and push the image
                script {
                    docker.withRegistry('', DOCKER_CREDENTIALS) {
                        sh "docker push $DOCKER_IMAGE"
                    }
                }
            }
        }
    }
    post {
        always {
            // Clean up workspace and Docker dangling images
            cleanWs()
            sh 'docker system prune -f'
        }
    }
}
